#!/usr/bin/env python3
import argparse
import datetime
import os
import re

import torch
import torchmetrics

import npfl138
npfl138.require_version("2425.8")
from npfl138.datasets.morpho_dataset import MorphoDataset

parser = argparse.ArgumentParser()
# These arguments will be set appropriately by ReCodEx, even if you change them.
parser.add_argument("--batch_size", default=10, type=int, help="Batch size.")
parser.add_argument("--epochs", default=5, type=int, help="Number of epochs.")
parser.add_argument("--label_smoothing", default=0.0, type=float, help="Label smoothing.")
parser.add_argument("--max_sentences", default=None, type=int, help="Maximum number of sentences to load.")
parser.add_argument("--recodex", default=False, action="store_true", help="Evaluation in ReCodEx.")
parser.add_argument("--rnn", default="LSTM", choices=["LSTM", "GRU"], help="RNN layer type.")
parser.add_argument("--rnn_dim", default=64, type=int, help="RNN layer dimension.")
parser.add_argument("--seed", default=45, type=int, help="Random seed.")
parser.add_argument("--show_predictions", default=False, action="store_true", help="Show predicted tag sequences.")
parser.add_argument("--threads", default=1, type=int, help="Maximum number of threads to use.")
parser.add_argument("--we_dim", default=128, type=int, help="Word embedding dimension.")
# If you add more arguments, ReCodEx will keep them with your default values.


class Model(npfl138.TrainableModule):
    def __init__(self, args: argparse.Namespace, train: MorphoDataset.Dataset) -> None:
        super().__init__()
        self._show_predictions = args.show_predictions
        # TODO: Compute the transition matrix `A` of shape `[num_tags, num_tags]`, so
        # that `A[i, j]` is 0/1 depending on whether the tag `j` is allowed to follow
        # the tag `i` (according to our BIO encoding; not necessarily in the data).
        # The tag strings can be obtained by calling `list(train.tags.string_vocab)`.
        self._tags = list(train.tags.string_vocab)
        num_tags = len(self._tags)
        # A[i,j] = 1 if tag j can validly follow tag i
        A = torch.zeros((num_tags, num_tags), dtype=torch.uint8)
        for i, prev in enumerate(self._tags):
            for j, curr in enumerate(self._tags):
                if curr == "O" or curr.startswith("B-"):
                    A[i, j] = 1
                elif curr.startswith("I-"):
                    typ = curr[2:]
                    if prev == f"B-{typ}" or prev == f"I-{typ}":
                        A[i, j] = 1

        # The following call will create `self._A` and it will become part of the object state.
        self.register_buffer("_A", A)

        # Create all needed layers.
        # TODO(tagger_we): Create a `torch.nn.Embedding` layer, embedding the word ids
        # from `train.words.string_vocab` to dimensionality `args.we_dim`.
        self._word_embedding = torch.nn.Embedding(
            num_embeddings=len(train.words.string_vocab),
            embedding_dim=args.we_dim
        )

        # TODO(tagger_we): Create an RNN layer, either `torch.nn.LSTM` or `torch.nn.GRU` depending
        # on `args.rnn`. The layer should be bidirectional (`bidirectional=True`) with
        # dimensionality `args.rnn_dim`. During the model computation, the layer will
        # process the word embeddings generated by the `self._word_embedding` layer,
        # and we will sum the outputs of forward and backward directions.
        rnn_class = torch.nn.LSTM if args.rnn == "LSTM" else torch.nn.GRU
        self._word_rnn = rnn_class(
            input_size=args.we_dim,
            hidden_size=args.rnn_dim,
            bidirectional=True
        )

        # TODO(tagger_we): Create an output linear layer (`torch.nn.Linear`) processing the RNN output,
        # producing logits for tag prediction; `train.tags.string_vocab` is the tag vocabulary.
        self._output_layer = torch.nn.Linear(
            in_features=args.rnn_dim,
            out_features=num_tags
        )

    def forward(self, word_ids: torch.Tensor) -> torch.Tensor:
        # TODO(tagger_we): Start by embedding the `word_ids` using the word embedding layer.
        # TODO(tagger_we): Process the embedded words through the RNN layer. Because the sentences
        # have different length, you have to use `torch.nn.utils.rnn.pack_padded_sequence`
        # to construct a variable-length `PackedSequence` from the input. You need to compute
        # the length of each sentence in the batch (by counting non-`MorphoDataset.PAD` tokens);
        # note that these lengths must be on CPU, so you might need to use the `.cpu()` method.
        # Finally, also pass `batch_first=True` and `enforce_sorted=False` to the call.
        # TODO(tagger_we): Pass the `PackedSequence` through the RNN, choosing the appropriate output.
        # TODO(tagger_we): Unpack the RNN output using the `torch.nn.utils.rnn.pad_packed_sequence` with
        # `batch_first=True` argument. Then sum the outputs of forward and backward directions.
        # TODO(tagger_we): Pass the RNN output through the output layer. Such an output has a shape
        # `[batch_size, sequence_length, num_tags]`, but the loss and the metric expect
        # the `num_tags` dimension to be in front (`[batch_size, num_tags, sequence_length]`),
        # so you need to reorder the dimensions.

        # word_ids: [batch, seq_len]
        embedded = self._word_embedding(word_ids)
        # Compute sentence lengths (non-pad tokens)
        lengths = (word_ids != MorphoDataset.PAD).sum(dim=1).cpu()
        # Pack padded sequence
        packed = torch.nn.utils.rnn.pack_padded_sequence(
            embedded, lengths,
            batch_first=True, enforce_sorted=False
        )
        # RNN
        packed_output, _ = self._word_rnn(packed)
        # Unpack
        padded, _ = torch.nn.utils.rnn.pad_packed_sequence(
            packed_output, batch_first=True
        )  # [batch, seq_len, 2*rnn_dim]
        # Sum forward and backward
        fwd = padded[:, :, :self._word_rnn.hidden_size]
        bwd = padded[:, :, self._word_rnn.hidden_size:]
        summed = fwd + bwd
        # Linear layer
        logits = self._output_layer(summed)  # [batch, seq_len, num_tags]
        # Reorder for loss/metric: [batch, num_tags, seq_len]
        return logits.transpose(1, 2)

    def constrained_decoding(self, logits: torch.Tensor, word_ids: torch.Tensor) -> torch.Tensor:
        # TODO: Perform constrained decoding, i.e., produce the most likely BIO-encoded
        # valid sequence. In a valid sequence, all tags are `O`, `B-TYPE`, `I-TYPE`, and
        # the `I-TYPE` tag must follow either `B-TYPE` or `I-TYPE` tag. This correctness
        # can be implemented by checking that every neighboring pair of tags is valid
        # according to the transition matrix `self._A`, plus the sequence cannot start
        # with an "I-" tag -- a possible solution is to consider a tag sequence to be
        # prefixed by a virtual "O" tag during decoding. Finally, the tags for padding
        # tokens must be `MorphoDataset.PAD`s.
        
        # logits: [batch, num_tags, seq_len]
        # word_ids: [batch, seq_len]
        batch, num_tags, seq_len = logits.size()
        # [batch, seq_len, num_tags]
        scores = logits.permute(0, 2, 1)
        device = logits.device
        PAD = MorphoDataset.PAD
        A = self._A.to(device)
        O_idx = self._tags.index("O")
        # Prepare predictions, default PAD
        predictions = torch.full((batch, seq_len), PAD, dtype=torch.long, device=device)
        # Transition log-probs: 0 for allowed, -inf for disallowed
        trans_log = torch.where(
            A.bool(),
            torch.zeros_like(A, dtype=torch.float32),
            torch.full_like(A, -1e9, dtype=torch.float32)
        )
        # Decode per sentence
        for i in range(batch):
            length = (word_ids[i] != PAD).sum().item()
            if length == 0:
                continue
            seq_scores = scores[i, :length, :]  # [L, num_tags]
            # Viterbi DP
            dp = torch.full((length, num_tags), -1e9, device=device)
            backptr = torch.zeros((length, num_tags), dtype=torch.long, device=device)
            # Initialization (from virtual O)
            dp[0] = seq_scores[0] + trans_log[O_idx]
            # Recurrence
            for t in range(1, length):
                prev = dp[t-1].unsqueeze(1)  # [num_tags,1]
                emit = seq_scores[t].unsqueeze(0)  # [1,num_tags]
                # scores over all prev->curr
                all_scores = prev + trans_log + emit  # [num_tags,num_tags]
                best_scores, best_tags = all_scores.max(dim=0)
                dp[t] = best_scores
                backptr[t] = best_tags
            # Backtrace
            tags = torch.zeros(length, dtype=torch.long, device=device)
            # best last tag
            last = dp[length-1].argmax().item()
            tags[length-1] = last
            for t in range(length-1, 0, -1):
                tags[t-1] = backptr[t, tags[t]]
            predictions[i, :length] = tags
        return predictions

    def compute_metrics(self, y_pred, y, word_ids):
        self.metrics["accuracy"].update(y_pred, y)
        if self.training:
            return {"accuracy": self.metrics["accuracy"].compute()}

        # Perform greedy decoding.
        predictions_greedy = y_pred.argmax(dim=1)
        predictions_greedy.masked_fill_(word_ids == MorphoDataset.PAD, MorphoDataset.PAD)
        self.metrics["f1_greedy"].update(predictions_greedy, y)

        # TODO: Perform constrained decoding by calling `self.constrained_decoding`
        # on `y_pred` and `word_ids`.
        predictions = self.constrained_decoding(y_pred, word_ids)
        predictions.masked_fill_(word_ids == MorphoDataset.PAD, MorphoDataset.PAD)
        self.metrics["f1_constrained"].update(predictions, y)

        if self._show_predictions:
            for tags in predictions:
                print(*[self.metrics["f1_constrained"]._labels[tag] for tag in tags])

        return {name: metric.compute() for name, metric in self.metrics.items()}

    def predict_step(self, xs, as_numpy=True):
        with torch.no_grad():
            # Perform constrained decoding.
            batch = self.constrained_decoding(self.forward(*xs), *xs)
            if as_numpy:
                batch = [example.numpy(force=True) for example in batch]
            # Trim the padding tags from the predictions.
            batch = [example[example != MorphoDataset.PAD] for example in batch]
            return batch


class TrainableDataset(npfl138.TransformedDataset):
    def transform(self, example):
        # TODO(tagger_we): Construct a single example, each consisting of the following pair:
        # - a PyTorch tensor of integer ids of input words as input,
        # - a PyTorch tensor of integer tag ids as targets.
        # To create the ids, use `string_vocab` of `self.dataset.words` and `self.dataset.tags`.
        word_ids = torch.tensor(
            [self.dataset.words.string_vocab.indices([w])[0] for w in example["words"]],
            dtype=torch.long
        )
        tag_ids = torch.tensor(
            [self.dataset.tags.string_vocab.indices([t])[0] for t in example["tags"]],
            dtype=torch.long
        )
        return word_ids, tag_ids

    def collate(self, batch):
        # Construct a single batch, where `batch` is a list of examples
        # generated by `transform`.
        word_ids, tag_ids = zip(*batch)
        # TODO(tagger_we): Combine `word_ids` into a single tensor, padding shorter
        # sequences to length of the longest sequence in the batch with zeros
        # using `torch.nn.utils.rnn.pad_sequence` with `batch_first=True` argument.
        word_ids = torch.nn.utils.rnn.pad_sequence(
            word_ids, batch_first=True, padding_value=MorphoDataset.PAD
        )
        # TODO(tagger_we): Process `tag_ids` analogously to `word_ids`.
        tag_ids = torch.nn.utils.rnn.pad_sequence(
            tag_ids, batch_first=True, padding_value=MorphoDataset.PAD
        )
        return word_ids, tag_ids


def main(args: argparse.Namespace) -> dict[str, float]:
    # Set the random seed and the number of threads.
    npfl138.startup(args.seed, args.threads)
    npfl138.global_keras_initializers()

    # Create logdir name.
    args.logdir = os.path.join("logs", "{}-{}-{}".format(
        os.path.basename(globals().get("__file__", "notebook")),
        datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S"),
        ",".join(("{}={}".format(re.sub("(.)[^_]*_?", r"\1", k), v) for k, v in sorted(vars(args).items())))
    ))

    # Load the data.
    morpho = MorphoDataset("czech_cnec", max_sentences=args.max_sentences)

    # Prepare the data for training.
    train = TrainableDataset(morpho.train).dataloader(batch_size=args.batch_size, shuffle=True)
    dev = TrainableDataset(morpho.dev).dataloader(batch_size=args.batch_size)

    # Create the model and train.
    model = Model(args, morpho.train)

    model.configure(
        # TODO(tagger_we): Create the Adam optimizer.
        optimizer=torch.optim.Adam(model.parameters()),
        # TODO: Use `torch.nn.CrossEntropyLoss` to instantiate the loss function.
        # Pass `ignore_index=morpho.PAD` to the constructor to ignore padding tags
        # during loss computation; also pass `label_smoothing=args.label_smoothing`.
        loss=torch.nn.CrossEntropyLoss(
            ignore_index=MorphoDataset.PAD,
            label_smoothing=args.label_smoothing
        ),
        metrics={
            "accuracy": torchmetrics.Accuracy(
                task="multiclass",
                num_classes=len(morpho.train.tags.string_vocab),
                ignore_index=MorphoDataset.PAD
            ),
            "f1_constrained": npfl138.metrics.BIOEncodingF1Score(
                list(morpho.train.tags.string_vocab),
                ignore_index=MorphoDataset.PAD
            ),
            "f1_greedy": npfl138.metrics.BIOEncodingF1Score(
                list(morpho.train.tags.string_vocab),
                ignore_index=MorphoDataset.PAD
            ),
        },
        logdir=args.logdir,
    )

    logs = model.fit(train, dev=dev, epochs=args.epochs)

    # Return development metrics for ReCodEx to validate.
    return {metric: value for metric, value in logs.items() if metric.startswith("dev_")}


if __name__ == "__main__":
    main_args = parser.parse_args([] if "__file__" not in globals() else None)
    main(main_args)
